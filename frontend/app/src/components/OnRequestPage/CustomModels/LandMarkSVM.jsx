import React from "react";
import SelectTestMetrics from "../RequestComponents/SelectTestMetrics";
import { useFormContext } from "react-hook-form";
import {
  ScaleIcon,
  CogIcon,
  HashtagIcon,
  CursorArrowRaysIcon,
  AdjustmentsHorizontalIcon,
  Squares2X2Icon,
  LightBulbIcon,
  RocketLaunchIcon,
  MapIcon,
} from "@heroicons/react/24/solid";

/*
Checks/validation can be included in the component later as these do not involve changing something out of this file...
This can be done by simply implementing the validation schema and Resolvers from react-hook-form to link the
checks mentioned in the schema

schema of this component (model_info obj generated by this component):

==================================================
sample model_info object:

  "model_info": {
    "C": 1.0,
    "gamma": "auto",
    "degree": 3,
    "coef0": 0.0,
    "lr": 0.01,
    "n_iters": 100,
    "weights_shape": "(5, 10)",
    "is_binary": false,
    "kernel": "rbf",
    "landmarks": null,
    "num_landmarks": 15
  }

==================================================
*/

const LandMarkSVM = () => {
  const { register } = useFormContext();
  const defaultValues = {
    C: 1.0,
    gamma: "auto",
    degree: 3,
    coef0: 0.0,
    lr: 0.01,
    n_iters: 100,
    weights_shape: "(5, 10)",
    is_binary: "false",
    kernel: "rbf",
    landmarks: "",
    num_landmarks: 15,
  };

  return (
    <div className="p-4 bg-white rounded-lg shadow-md">
      <p className="text-lg font-semibold mb-4">
        Note: Weight shape is optional but required when all clients don't have
        the same number of classes
      </p>

      <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
        {/* C: Regularization parameter */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <ScaleIcon className="h-5 w-5 mr-2 text-blue-500" />C /
            Regularization parameter
          </label>
          <input
            type="number"
            placeholder="e.g. 1.0"
            defaultValue={defaultValues.C}
            {...register("model_info.C")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Gamma */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <CogIcon className="h-5 w-5 mr-2 text-blue-500" />
            Gamma
          </label>
          <input
            type="text"
            placeholder="e.g. auto"
            defaultValue={defaultValues.gamma}
            {...register("model_info.gamma")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Degree */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <HashtagIcon className="h-5 w-5 mr-2 text-blue-500" />
            Degree
          </label>
          <input
            type="number"
            placeholder="e.g. 3"
            defaultValue={defaultValues.degree}
            {...register("model_info.degree")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Coef0 */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <CursorArrowRaysIcon className="h-5 w-5 mr-2 text-blue-500" />
            Coef0
          </label>
          <input
            type="number"
            step="0.01"
            placeholder="e.g. 0.0"
            defaultValue={defaultValues.coef0}
            {...register("model_info.coef0")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Learning Rate */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <LightBulbIcon className="h-5 w-5 mr-2 text-blue-500" />
            Learning Rate
          </label>
          <input
            type="number"
            placeholder="e.g. 0.01"
            defaultValue={defaultValues.lr}
            {...register("model_info.lr")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Number of Iterations */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <RocketLaunchIcon className="h-5 w-5 mr-2 text-blue-500" />#
            Iterations
          </label>
          <input
            type="number"
            placeholder="number of iterations in 1 epoch e.g. 100"
            defaultValue={defaultValues.n_iters}
            {...register("model_info.n_iters")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Weight Shape */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <Squares2X2Icon className="h-5 w-5 mr-2 text-blue-500" />
            Weight Shape
          </label>
          <input
            type="text"
            placeholder="e.g. (5, 10) for 5 classes and 10 features per class"
            defaultValue={defaultValues.weights_shape}
            {...register("model_info.weights_shape")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Landmarks */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <MapIcon className="h-5 w-5 mr-2 text-blue-500" />
            Landmarks
          </label>
          <input
            type="text"
            placeholder="specific landmark points if you have it (optional)"
            defaultValue={defaultValues.landmarks}
            {...register("model_info.landmarks")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>

        {/* Number of Landmarks */}
        <div>
          <label className="flex items-center text-gray-700 font-medium mb-1">
            <HashtagIcon className="h-5 w-5 mr-2 text-blue-500" />
            Number of Landmarks
          </label>
          <input
            type="number"
            placeholder="e.g. 15"
            defaultValue={defaultValues.num_landmarks}
            {...register("model_info.num_landmarks")}
            className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
          />
        </div>
      </div>

      {/* Binary Classification */}
      <div className="mt-4">
        <label className="flex items-center text-gray-700 font-medium mb-1">
          <AdjustmentsHorizontalIcon className="h-5 w-5 mr-2 text-blue-500" />
          Binary Classification
        </label>
        <div className="flex space-x-4">
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              value="true"
              defaultChecked={defaultValues.is_binary === "true"}
              {...register("model_info.is_binary")}
              className="form-radio text-blue-500"
            />
            <span>Yes</span>
          </label>
          <label className="flex items-center space-x-2">
            <input
              type="radio"
              value="false"
              defaultChecked={defaultValues.is_binary === "false"}
              {...register("model_info.is_binary")}
              className="form-radio text-blue-500"
            />
            <span>No</span>
          </label>
        </div>
      </div>

      {/* Kernel */}
      <div className="mt-4">
        <label className="flex items-center text-gray-700 font-medium mb-1">
          <Squares2X2Icon className="h-5 w-5 mr-2 text-blue-500" />
          Kernel
        </label>
        <input
          type="text"
          placeholder="e.g. rbf"
          defaultValue={defaultValues.kernel}
          {...register("model_info.kernel")}
          className="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-400 focus:outline-none"
        />
      </div>

      {/* Select Test Metrics */}
      <div className="mt-4">
        <SelectTestMetrics register={register} />
      </div>
    </div>
  );
};

export default LandMarkSVM;

// ######################## Delete after testing above one ##############################
// import React from "react";
// import TestMetricsMultiselect from "../OnWholeApp/helperFunctions";

// /*
// Checks/validation can be included in the component later as these do not involve changing something out of this file...
// This can be done by simply implementing the validation schema and Resolvers from react-hook-form to link the
// checks mentioned in the schema

// schema of this component (model_info obj generated by this component):

// ==================================================
// sample model_info object:

//   "model_info": {
//     "C": 1.0,
//     "gamma": "auto",
//     "degree": 3,
//     "coef0": 0.0,
//     "lr": 0.01,
//     "n_iters": 100,
//     "weights_shape": "(5, 10)",
//     "is_binary": false,
//     "kernel": "rbf",
//     "landmarks": null,
//     "num_landmarks": 15
//   }

// ==================================================
// */

// const LandMarkSVM = ({ control, register }) => {
//   const defaultValues = {
//     C: 1.0,
//     gamma: "auto",
//     degree: 3,
//     coef0: 0.0,
//     lr: 0.01,
//     n_iters: 100,
//     weights_shape: "(5, 10)",
//     is_binary: "false",
//     kernel: "rbf",
//     landmarks: "",
//     num_landmarks: 15,
//   };

//   // Start of model_info component
//   return (
//     <div>
//       <p>
//         Note: Weight shape is optional but required when all clients don't have
//         the same number of classes
//       </p>

//       {/* C: Regularization parameter */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">C/Regularization parameter</span>
//         <input
//           type="number"
//           className="form-control"
//           placeholder="e.g. 1.0"
//           defaultValue={defaultValues.C}
//           {...register("model_info.C")}
//         />
//       </div>

//       {/* Gamma */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Gamma</span>
//         <input
//           type="text"
//           className="form-control"
//           placeholder="e.g. auto"
//           defaultValue={defaultValues.gamma}
//           {...register("model_info.gamma")}
//         />
//       </div>

//       {/* Degree */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Degree</span>
//         <input
//           type="number"
//           className="form-control"
//           placeholder="e.g. 3"
//           defaultValue={defaultValues.degree}
//           {...register("model_info.degree")}
//         />
//       </div>

//       {/* Coef0 */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Coef0</span>
//         <input
//           type="number"
//           className="form-control"
//           step="0.01"
//           placeholder="e.g. 0.0"
//           defaultValue={defaultValues.coef0}
//           {...register("model_info.coef0")}
//         />
//       </div>

//       {/* Learning rate */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Learning rate</span>
//         <input
//           type="number"
//           className="form-control"
//           placeholder="e.g. 0.01"
//           defaultValue={defaultValues.lr}
//           {...register("model_info.lr")}
//         />
//       </div>

//       {/* Number of iterations */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">#iter</span>
//         <input
//           type="number"
//           className="form-control"
//           placeholder="number of iterations in 1 epoch e.g. 100"
//           defaultValue={defaultValues.n_iters}
//           {...register("model_info.n_iters")}
//         />
//       </div>

//       {/* Weight shape */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Weight shape</span>
//         <input
//           type="text"
//           className="form-control"
//           placeholder="e.g. (5, 10) for 5 classes and 10 features per class"
//           defaultValue={defaultValues.weights_shape}
//           {...register("model_info.weights_shape")}
//         />
//       </div>

//       {/* Binary classification */}
//       <div className="input-group">
//         <span className="input-group-text">Binary Classification</span>
//         <div className="form-check form-check-inline mx-auto">
//           <input
//             className="form-check-input"
//             type="radio"
//             name="binaryClassification"
//             id="binaryClassificationYes"
//             value="true"
//             defaultChecked={defaultValues.is_binary === "true"}
//             {...register("model_info.is_binary")}
//           />
//           <label className="form-check-label" htmlFor="binaryClassificationYes">
//             Yes
//           </label>
//         </div>
//         <div className="form-check form-check-inline mx-auto">
//           <input
//             className="form-check-input"
//             type="radio"
//             name="binaryClassification"
//             id="binaryClassificationNo"
//             value="false"
//             defaultChecked={defaultValues.is_binary === "false"}
//             {...register("model_info.is_binary")}
//           />
//           <label className="form-check-label" htmlFor="binaryClassificationNo">
//             No
//           </label>
//         </div>
//       </div>

//       {/* Kernel */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Kernel</span>
//         <input
//           type="text"
//           className="form-control"
//           placeholder="e.g. rbf"
//           defaultValue={defaultValues.kernel}
//           {...register("model_info.kernel")}
//         />
//       </div>

//       {/* Landmarks */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Landmarks</span>
//         <input
//           type="text"
//           className="form-control"
//           placeholder="specific landmark points if you have it (optional)" // should be actual data points not index or something
//           defaultValue={defaultValues.landmarks}
//           {...register("model_info.landmarks")}
//         />
//       </div>

//       {/* Number of landmarks */}
//       <div className="input-group mb-3">
//         <span className="input-group-text">Number of landmarks</span>
//         <input
//           type="number"
//           className="form-control"
//           placeholder="e.g. 15"
//           defaultValue={defaultValues.num_landmarks}
//           {...register("model_info.num_landmarks")}
//         />
//       </div>

//       {/* Select test metrics */}
//       <TestMetricsMultiselect register={register} />
//     </div>
//   );
// };

// export default LandMarkSVM;
// ######################## Delete after testing above one ##############################
