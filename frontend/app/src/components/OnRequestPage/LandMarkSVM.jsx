import React from "react";
import TestMetricsMultiselect from "../OnWholeApp/helperFunctions";

/*
Checks/validation can be included in the component later as these do not involve changing something out of this file...
This can be done by simply implementing the validation schema and Resolvers from react-hook-form to link the
checks mentioned in the schema

schema of this component (model_info obj generated by this component):

==================================================
sample model_info object:

  "model_info": {
    "C": 1.0,
    "gamma": "auto",
    "degree": 3,
    "coef0": 0.0,
    "lr": 0.01,
    "n_iters": 100,
    "weights_shape": "(5, 10)",
    "is_binary": false,
    "kernel": "rbf",
    "landmarks": null,
    "num_landmarks": 15
  }

==================================================
*/

const LandMarkSVM = ({ control, register }) => {
  const defaultValues = {
    C: 1.0,
    gamma: "auto",
    degree: 3,
    coef0: 0.0,
    lr: 0.01,
    n_iters: 100,
    weights_shape: "(5, 10)",
    is_binary: "false",
    kernel: "rbf",
    landmarks: "",
    num_landmarks: 15,
  };

  // Start of model_info component
  return (
    <div>
      <p>
        Note: Weight shape is optional but required when all clients don't have
        the same number of classes
      </p>

      {/* C: Regularization parameter */}
      <div className="input-group mb-3">
        <span className="input-group-text">C/Regularization parameter</span>
        <input
          type="number"
          className="form-control"
          placeholder="e.g. 1.0"
          defaultValue={defaultValues.C}
          {...register("model_info.C")}
        />
      </div>

      {/* Gamma */}
      <div className="input-group mb-3">
        <span className="input-group-text">Gamma</span>
        <input
          type="text"
          className="form-control"
          placeholder="e.g. auto"
          defaultValue={defaultValues.gamma}
          {...register("model_info.gamma")}
        />
      </div>

      {/* Degree */}
      <div className="input-group mb-3">
        <span className="input-group-text">Degree</span>
        <input
          type="number"
          className="form-control"
          placeholder="e.g. 3"
          defaultValue={defaultValues.degree}
          {...register("model_info.degree")}
        />
      </div>

      {/* Coef0 */}
      <div className="input-group mb-3">
        <span className="input-group-text">Coef0</span>
        <input
          type="number"
          className="form-control"
          step="0.01"
          placeholder="e.g. 0.0"
          defaultValue={defaultValues.coef0}
          {...register("model_info.coef0")}
        />
      </div>

      {/* Learning rate */}
      <div className="input-group mb-3">
        <span className="input-group-text">Learning rate</span>
        <input
          type="number"
          className="form-control"
          placeholder="e.g. 0.01"
          defaultValue={defaultValues.lr}
          {...register("model_info.lr")}
        />
      </div>

      {/* Number of iterations */}
      <div className="input-group mb-3">
        <span className="input-group-text">#iter</span>
        <input
          type="number"
          className="form-control"
          placeholder="number of iterations in 1 epoch e.g. 100"
          defaultValue={defaultValues.n_iters}
          {...register("model_info.n_iters")}
        />
      </div>

      {/* Weight shape */}
      <div className="input-group mb-3">
        <span className="input-group-text">Weight shape</span>
        <input
          type="text"
          className="form-control"
          placeholder="e.g. (5, 10) for 5 classes and 10 features per class"
          defaultValue={defaultValues.weights_shape}
          {...register("model_info.weights_shape")}
        />
      </div>

      {/* Binary classification */}
      <div className="input-group">
        <span className="input-group-text">Binary Classification</span>
        <div className="form-check form-check-inline mx-auto">
          <input
            className="form-check-input"
            type="radio"
            name="binaryClassification"
            id="binaryClassificationYes"
            value="true"
            defaultChecked={defaultValues.is_binary === "true"}
            {...register("model_info.is_binary")}
          />
          <label className="form-check-label" htmlFor="binaryClassificationYes">
            Yes
          </label>
        </div>
        <div className="form-check form-check-inline mx-auto">
          <input
            className="form-check-input"
            type="radio"
            name="binaryClassification"
            id="binaryClassificationNo"
            value="false"
            defaultChecked={defaultValues.is_binary === "false"}
            {...register("model_info.is_binary")}
          />
          <label className="form-check-label" htmlFor="binaryClassificationNo">
            No
          </label>
        </div>
      </div>

      {/* Kernel */}
      <div className="input-group mb-3">
        <span className="input-group-text">Kernel</span>
        <input
          type="text"
          className="form-control"
          placeholder="e.g. rbf"
          defaultValue={defaultValues.kernel}
          {...register("model_info.kernel")}
        />
      </div>

      {/* Landmarks */}
      <div className="input-group mb-3">
        <span className="input-group-text">Landmarks</span>
        <input
          type="text"
          className="form-control"
          placeholder="specific landmark points if you have it (optional)" // should be actual data points not index or something
          defaultValue={defaultValues.landmarks}
          {...register("model_info.landmarks")}
        />
      </div>

      {/* Number of landmarks */}
      <div className="input-group mb-3">
        <span className="input-group-text">Number of landmarks</span>
        <input
          type="number"
          className="form-control"
          placeholder="e.g. 15"
          defaultValue={defaultValues.num_landmarks}
          {...register("model_info.num_landmarks")}
        />
      </div>

      {/* Select test metrics */}
      <TestMetricsMultiselect register={register} />
    </div>
  );
};

export default LandMarkSVM;
